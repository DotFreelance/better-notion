{"version":3,"sources":["logo.svg","styles/animations.tsx","components/Grid/elements/StyledCard/StyledCard.tsx","models/CardTypes.tsx","components/Grid/elements/cardStyles.tsx","components/Grid/elements/ImageCard/ImageCard.tsx","components/Grid/elements/TextCard/TextCard.tsx","hooks/useWebsiteDetails.tsx","components/Grid/elements/WebsiteCard/WebsiteCard.tsx","models/ImageTypes.tsx","components/Grid/elements/GridCard/GridCard.tsx","hooks/useStoredImage.tsx","reducers/addCardReducer.tsx","components/Grid/elements/GridAddCard/GridAddCard.tsx","utils/debounce.js","models/FakeData.js","hooks/useStoredCards.tsx","components/Grid/Grid.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","theMagicCurve","bgSlide","keyframes","fadeIn","flexShrink","growAndShow","backgroundSlide","component","styled","color","direction","CardTypes","StyledCard","div","props","bg","randomStyle","bgColor1","bgColor2","textColor","index","Array","fill","reduce","acc","val","arr","Math","pow","length","StyledCardType","p","StyledCardTitle","h1","randomColors","floor","random","ImageCardContainer","ImageCard","card","style","backgroundImage","image","Image","title","StyledCardContent","TextCardContainer","TextCard","Text","content","useWebsiteDetails","url","useState","currentUrl","setCurrentUrl","websiteData","setWebsiteData","useLayoutEffect","controller","AbortController","signal","localData","localStorage","getItem","JSON","parse","a","response","ky","get","process","console","log","json","setItem","stringify","abort","ImageTypes","WebsiteCardContainer","StyledCardUrl","WebsiteCard","website","Website","GridCard","useRef","current","type","elementForCard","acceptedImageTypes","gif","jpeg","png","webp","notSupportedImageTypes","heic","initialCardState","NewCard","body","addCardReducer","state","newState","modifiedState","StyledAddCard","StyledTextArea","textarea","cardType","StyledIcon","i","GridAddCard","onAdd","checkForUrl","useCallback","func","wait","immediate","timeout","debouncedFunc","context","this","args","arguments","later","apply","callNow","clearTimeout","setTimeout","cancel","debounce","text","match","setWebsiteUrl","setCurrentCard","addCardHandler","currentCard","split","slice","join","styleRef","useReducer","setImage","imageData","setImageData","useEffect","name","size","find","acceptedType","storedImage","base64","filereader","FileReader","readAsDataURL","onload","result","notSupportedType","useStoredImage","droppedImage","setDroppedImage","useDropzone","onDrop","files","noClick","noKeyboard","getRootProps","getInputProps","isDragActive","onKeyDown","e","key","getModifierState","preventDefault","target","value","trim","placeholder","onChange","className","StoredCardsContext","createContext","f","StoredCardsManager","userId","cards","setCards","FakeData","newCard","oldCards","StoredCardsProvider","children","Provider","StyledList","Grid","useContext","storedCards","addCard","useAnimDelay","setUseAnimDelay","TransitionGroup","map","CSSTransition","PageContainer","App","src","logo","alt","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,whCCIpC,IAAMC,EAAgB,oCAGvBC,EAAUC,YAAH,KASAC,EAASD,YAAH,KASNE,EAAaF,YAAH,KASVG,EAAcH,YAAH,KAYXI,EAAkB,SAAAC,GAAS,OAAIC,YAAOD,EAAPC,CAAJ,IAKnBP,I,udC9CrB,IAEEQ,EACAC,ECRGC,ED2BQC,EAAaJ,IAAOK,IAAV,KAOP,SAAAC,GAAK,OAVKC,EAUgBD,EAAME,aAAe,GAVtC,kCACID,EAAGE,SADP,aACoBF,EAAGG,SADvB,SAACH,KAaf,SAAAD,GAAK,OACZA,EAAME,YAAcF,EAAME,YAAYG,UAAY,YAElChB,GAEC,SAAAW,GAAK,MAAkB,IAAdA,EAAMM,SAnClCX,EAoCqB,sBAjCrB,IAAIY,MAiCc,GAhCfC,KAAK,GACLC,QACC,SAACC,EAAKC,EAAKL,EAAOM,GAAlB,OACEF,EAAG,UACAG,KAAKC,IAAI,EAAGR,GADZ,cACsC,OAAdV,EAAqB,IAAM,IADnD,OACwDiB,KAAKC,IAC9D,EACAR,GAHC,cAIIO,KAAKC,IAAI,EAAGR,GAJhB,cAI4BX,GAJ5B,OAKDiB,EAAIG,SAAWT,EAAQ,EAAI,IAAM,QAErC,mB,SCrBDT,K,mBAAAA,E,cAAAA,E,kBAAAA,E,aAAAA,M,KAMUA,Q,keCAR,IAAMmB,EAAiBtB,IAAOuB,EAAV,KAOdC,EAAkBxB,IAAOyB,GAAV,IAWR5B,EAAeL,GAG7BkC,EAAe,CACnB,CACEjB,SAAU,UACVC,SAAU,UACVC,UAAW,WAEb,CACEF,SAAU,UACVC,SAAU,UACVC,UAAW,WAEb,CACEF,SAAU,UACVC,SAAU,UACVC,UAAW,WAEb,CACEF,SAAU,UACVC,SAAU,UACVC,UAAW,WAEb,CACEF,SAAU,UACVC,SAAU,UACVC,UAAW,WAEb,CACEF,SAAU,UACVC,SAAU,UACVC,UAAW,WAYb,CACEF,SAAU,UACVC,SAAU,UACVC,UAAW,YAGFH,EAAc,kBACzBkB,EAAaP,KAAKQ,MAAMR,KAAKS,SAAWF,EAAaL,U,4NC5DvD,IAAMQ,EAAqB/B,EAAgBE,IAAOK,IAAP,MAU9ByB,EAA8B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC5C,OACE,kBAACF,EAAD,CACEG,MAAO,CACLC,gBAAgB,6CAAD,OAA+CF,EAAKG,MAApD,QAGjB,kBAACZ,EAAD,KAAiBnB,EAAUgC,OAC3B,kBAACX,EAAD,KAAkBO,EAAKK,S,4aClB7B,IAAMC,EAAoBrC,IAAOuB,EAAV,IAOH3B,EAAmBJ,GAGjC8C,EAAoBtC,IAAOK,IAAV,KASVkC,EAA6B,SAAC,GAAc,IAAZR,EAAW,EAAXA,KAC3C,OACE,kBAACO,EAAD,KACE,kBAAChB,EAAD,KAAiBnB,EAAUqC,MAC3B,kBAAChB,EAAD,KAAkBO,EAAKK,OACvB,kBAACC,EAAD,KAAoBN,EAAKU,W,+BChClBC,EAAoB,SAC/BC,GACyC,IAAD,EACJC,mBAASD,GAAO,IADZ,mBACjCE,EADiC,KACrBC,EADqB,OAEFF,mBAAS,MAFP,mBAEjCG,EAFiC,KAEpBC,EAFoB,KAqCxC,OAjCAC,2BAAgB,WACd,IAAMC,EAAa,IAAIC,gBACfC,EAAWF,EAAXE,OAER,GAAIP,EAAY,CACd,IAAMQ,EAAYC,aAAaC,QAAQV,GACnCQ,EACFL,EAAeQ,KAAKC,MAAMJ,IAE1B,sBAAC,8BAAAK,EAAA,6DACKC,EAA4B,KADjC,kBAGoBC,IAAGC,IAAH,2CACqBC,gDADrB,cACoEjB,GACnF,CAAEO,WALP,OAGGO,EAHH,uDAQGI,QAAQC,IAAI,KAAEL,UARjB,YAUKA,EAVL,kCAWsBA,EAASM,OAX/B,QAWSA,EAXT,OAYGjB,EAAeiB,GACfX,aAAaY,QAAQrB,EAAYW,KAAKW,UAAUF,IAbnD,wDAAD,QAkBFjB,EAAe,MAGjB,OAAO,kBAAME,EAAWkB,WACvB,CAACvB,IAEG,CAACE,EAAaD,I,6XC3BvB,ICnBKuB,EDmBCC,EAAuBxE,EAAgBE,IAAOK,IAAP,MASvCkE,EAAgBvE,IAAOuB,EAAV,IAKC3B,EAAmBJ,GAG1BgF,EAAgC,SAAC,GAAc,IAAZzC,EAAW,EAAXA,KAAW,EACvCW,EAAkBX,EAAKY,KAAlC8B,EADkD,oBAGzD,OACE,kBAACH,EAAD,CACEtC,MAAO,CACLC,gBAAgB,6CAAD,OACbwC,EAAUA,EAAQvC,MAAQ,GADb,QAKjB,kBAACZ,EAAD,KAAiBnB,EAAUuE,SAC3B,kBAAClD,EAAD,KAAkBiD,EAAUA,EAAQrC,MAAQL,EAAKK,OACjD,kBAACmC,EAAD,KAAgBxC,EAAKY,OE1BdgC,GAA6B,SAAC,GAAqB,IAAnB5C,EAAkB,EAAlBA,KAAMnB,EAAY,EAAZA,MAC3CoB,EAAQ4C,iBAAOpE,KAcrB,OACE,kBAACJ,EAAD,CAAYQ,MAAOA,EAAOJ,YAAawB,EAAM6C,SAdxB,SAAC9C,GACtB,OAAQA,EAAK+C,MACX,KAAK3E,EAAUgC,MACb,OAAO,kBAAC,EAAD,CAAWJ,KAAMA,IAC1B,KAAK5B,EAAUqC,KACb,OAAO,kBAAC,EAAD,CAAUT,KAAMA,IACzB,KAAK5B,EAAUuE,QACb,OAAO,kBAAC,EAAD,CAAa3C,KAAMA,IAC5B,QACE,OAAO,MAMRgD,CAAehD,K,mBDxCjBsC,K,kBAAAA,E,gBAAAA,E,gBAAAA,E,kBAAAA,E,mBAAAA,M,KAOUA,SEATW,GAAqB,CACzBX,GAAWY,IACXZ,GAAWa,KACXb,GAAWc,IACXd,GAAWe,MAEPC,GAAyB,CAAChB,GAAWiB,M,wOCVpC,IAAMC,GAAmB,CAC9BT,KAAM3E,EAAUqF,QAChBtD,MAAO,GACPE,MAAO,GACPqD,KAAM,IAGKC,GAAiB,SAACC,EAAOC,GACpC,IAAIC,E,4VAAa,IAAQF,EAAR,GAAkBC,GACnC,OAAQA,EAASd,MACf,KAAK3E,EAAUqF,QACbK,EAAczD,MAAQ,GACtByD,EAAcJ,KAAO,GACrBI,EAAc3D,MAAQ,GACtB,MACF,KAAK/B,EAAUqC,KACbqD,EAAc3D,MAAQ,GAG1B,OAAO2D,G,gxBCOT,IAAMC,GAAgB9F,YAAOI,EAAPJ,CAAH,MAOb+F,GAAiB/F,IAAOgG,SAAV,MAUT,SAAA1F,GAAK,OACZA,EAAM2F,WAAa9F,EAAUgC,OAAS7B,EAAM2F,WAAa9F,EAAUuE,QAC/D,UACA,aAUFwB,GAAalG,IAAOmG,EAAV,MAYHC,GAAgC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAIxCC,EAAcC,sBC3EP,SAAkBC,EAAMC,EAAMC,GAC3C,IAAIC,EACAC,EAAgB,WAClB,IAAIC,EAAUC,KACZC,EAAOC,UACLC,EAAQ,WACVN,EAAU,KACLD,GAAWF,EAAKU,MAAML,EAASE,IAElCI,EAAUT,IAAcC,EAC5BS,aAAaT,GACbA,EAAUU,WAAWJ,EAAOR,GACxBU,GAASX,EAAKU,MAAML,EAASE,IAOnC,OAJAH,EAAcU,OAAS,WACjBX,GAASS,aAAaT,IAGrBC,EDyDLW,EAAS,SAACC,GAENA,EAAKC,MAEH,mFAGFC,EAAcF,GAEdG,EAAe,CAAE7C,KAAM3E,EAAUqC,SAElC,KACH,IAkCIoF,EAAiB,WACrBvB,EAAM,CACJjE,MACEyF,EAAYzF,OACZyF,EAAYpC,KACTqC,MAAM,OACNC,MAAM,EAAG,GACTC,KAAK,KACVrF,IAAK8B,EAAUA,EAAQ9B,IAAM,GAC7BmC,KAAM+C,EAAY/C,KAClB5C,MAAO2F,EAAY3F,MACnBO,QAASoF,EAAYpC,OAEvBkC,EAAe,CAAE7C,KAAM3E,EAAUqF,WAI7ByC,EAAWrD,iBAAOpE,KApEkC,EAuEpB0H,qBACpCxC,GACAH,IAzEwD,mBAuEnDsC,EAvEmD,KAuEtCF,EAvEsC,OA2EzBjF,IA3EyB,mBA2EnD+B,EA3EmD,KA2E1CiD,EA3E0C,OFxD9B,WAAuC,IAAD,EACxC9E,mBAAsB,MADkB,mBAC3DV,EAD2D,KACpDiG,EADoD,OAEhCvF,mBAA6B,MAFG,mBAE3DwF,EAF2D,KAEhDC,EAFgD,KAuClE,OAnCAC,qBAAU,WACR,GAAIpG,EAAO,CAAC,IACFqG,EAAqBrG,EAArBqG,KAAMC,EAAetG,EAAfsG,KAAM1D,EAAS5C,EAAT4C,KAEpB,GAAIE,GAAmByD,MAAK,SAAAC,GAAY,OAAIA,IAAiB5D,KAAO,CAClE,IAAI6D,EAA2B,CAC7BC,OAAQ,GACRL,OACAC,OACA1D,QAGI+D,EAAa,IAAIC,WAEvBD,EAAWE,cAAc7G,GACzB2G,EAAWG,OAAS,WACe,kBAAtBH,EAAWI,QACpBN,EAAYC,OAASC,EAAWI,OAChCZ,EAAaM,IAEb5E,QAAQC,IAAI,4DAIhBqB,GAAuBoD,MACrB,SAAAS,GAAgB,OAAIA,IAAqBpE,KAG3Cf,QAAQC,IAAR,2BAEAD,QAAQC,IAAR,wBAGH,CAAC9B,IAEG,CAACkG,EAAWD,GE6FqBgB,GA5EkB,mBA4EnDC,EA5EmD,KA4ErCC,EA5EqC,OA6EJC,aAAY,CAChEC,OA5Ea,SAAAC,GAAK,OAAIH,EAAgBG,EAAM,KA6E5CC,SAAS,EACTC,YAAY,IAHNC,EA7EkD,EA6ElDA,aAAcC,EA7EoC,EA6EpCA,cAAeC,EA7EqB,EA6ErBA,aAmDrC,OA5CA5G,2BAAgB,WACd,OAAQ4E,EAAY/C,MAClB,KAAK3E,EAAUqF,QACbkC,EAAc,IACd,MACF,KAAKvH,EAAUuE,QAGf,KAAKvE,EAAUgC,MACbyF,IACA,MACF,KAAKzH,EAAUqC,KACbkF,EAAc,OAMjB,CAACG,EAAY/C,OAEhB7B,2BAAgB,WAEZ0E,EADElD,EACa,CACbK,KAAM3E,EAAUuE,QAChBxC,MAAOuC,EAAQvC,MACfE,MAAOqC,EAAQrC,OAGFmD,MAEhB,CAACd,IAEJxB,2BAAgB,WAEZ0E,EADEyB,EACa,CACbtE,KAAM3E,EAAUgC,MAChBD,MAAOkH,EAAaR,OACpBxG,MAAOgH,EAAab,MAGPhD,MAEhB,CAAC6D,IAGF,kBAACtD,GAAD,eACEtF,YAAayH,EAASpD,QACtB7C,MAAO,CACLC,gBAAiB4F,EAAY3F,MAAZ,0DACsC2F,EAAY3F,MADlD,MAEb,KAEFyH,IAPN,CAQEG,UA1G2B,SAACC,GAC9B,OAAQA,EAAEC,KACR,IAAK,QACED,EAAEE,iBAAiB,UAAaF,EAAEE,iBAAiB,aACtDF,EAAEG,iBACF5D,EAAYgB,SACRyC,EAAEI,OAAOC,MAAMC,OAAOhJ,QACxBuG,KAGJ,MACF,IAAK,SACEmC,EAAEE,iBAAiB,UAAaF,EAAEE,iBAAiB,aACtDF,EAAEG,iBACFvC,EAAe,CAAE7C,KAAM3E,EAAUqF,eA8FrC,0BAAWoE,KACX,kBAACtI,EAAD,KAAiBuG,EAAY/C,MAC5B+C,EAAYzF,OACX,kBAACZ,EAAD,KAAkBqG,EAAYzF,OAE/ByF,EAAY/C,OAAS3E,EAAUgC,OAC9B,kBAAC4D,GAAD,CACEE,SAAU4B,EAAY/C,KACtBwF,YAAY,2DACZC,SAhIsB,SAACR,GAC7B,IAAMK,EAAQL,EAAEI,OAAOC,MAAMC,OAC7B1C,EAAe,CAAElC,KAAMsE,EAAEI,OAAOC,QAC5BA,EACF9D,EAAY8D,IAEZ9D,EAAYgB,SACZK,EAAe,CAAE7C,KAAM3E,EAAUqF,YA0H7B4E,MAAOvC,EAAYpC,OAGtBoC,EAAY/C,OAAS3E,EAAUqF,SAC9B,kBAACU,GAAD,CAAYsE,UAAU,kBACnBX,EAAe,sBAAwB,S,SE/NnC,IACb,CACE/E,KAAM3E,EAAUgC,MAChBD,MACE,qKACFE,MAAO,qBAET,CACE0C,KAAM3E,EAAUuE,QAChB/B,IAAK,4BACLP,MAAO,oBAET,CACE0C,KAAM3E,EAAUqC,KAChBJ,MAAO,cACPO,IAAK,GACLF,QACE,+RCJAgI,GAAqBC,wBAHyB,CAAC,GAAI,SAAAC,GAAC,OAAIA,KAOxDC,GAAqB,SAACC,GAA6C,IAAD,EAC5CjI,mBAAsB,IADsB,mBAC/DkI,EAD+D,KACxDC,EADwD,KAWtE,OAJA9H,2BAAgB,WACd8H,EAASC,MACR,CAACH,IAEG,CAACC,EARQ,SAACG,GACfF,GAAS,SAAAG,GAAQ,6BAAQA,GAAR,CAAkBD,UAU1BE,GAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUP,EAAb,EAAaA,OAAb,OACjC,kBAACJ,GAAmBY,SAApB,CAA6BjB,MAAOQ,GAAmBC,IACpDO,I,uQCnBL,IAAME,GAAatL,IAAOK,IAAV,MAaHkL,GAAyB,WAAO,IAAD,EDURC,qBAAWf,ICVH,mBACnCgB,EADmC,KACtBC,EADsB,OAEF9I,oBAAS,GAFP,mBAEnC+I,EAFmC,KAErBC,EAFqB,KAS1C,OACE,iCACE,kBAACN,GAAD,KACE,kBAACO,EAAA,EAAD,CAAiB9L,UAAW,KAAMyK,UAAU,aACzCiB,EAAYK,KAAI,SAAC/J,EAAiBnB,GAAlB,OACf,kBAACmL,EAAA,EAAD,CAAe/B,IAAG,UAAKjI,EAAKK,OAAV,OAAkBxB,GAAS+F,QAAS,GACpD,kBAAC,GAAD,CAAU/F,MAAO+K,EAAe/K,EAAQ,EAAGmB,KAAMA,SAIvD,kBAAC,GAAD,CAAaiI,IAAK,gBAAiB3D,MAflB,SAACtE,GACtB6J,GAAgB,GAChBF,EAAQ3J,S,sHClBZ,IAAMiK,GAAgBhM,IAAOK,IAAV,MAuBJ4L,GAnBO,WACpB,OACE,yBAAKzB,UAAU,OACb,yBAAKA,UAAU,cACb,yBAAK0B,IAAKC,KAAM3B,UAAU,WAAW4B,IAAI,SACzC,yBAAK5B,UAAU,aACb,6CACA,2CAGJ,kBAAC,GAAD,CAAqBK,OAAQ,QAC3B,kBAACmB,GAAD,KACE,kBAAC,GAAD,UCrBUK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/E,MACvB,2DCZNgF,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.991f3805.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","// Modules.\nimport styled, { keyframes } from \"styled-components\";\n\n// Easing functions.\nexport const theMagicCurve = \"cubic-bezier(0.98, 0, 0.51, 0.77)\";\n\n// Keyframes.\nconst bgSlide = keyframes`\n  0% {\n    background-position: 50% 50%;\n  }\n  100% {\n    background-position: 70% 60%;\n  }\n`;\n\nexport const fadeIn = keyframes`\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`;\n\nexport const flexShrink = keyframes`\n  from {\n    flex-grow: 1;\n  }\n  to {\n    flex-grow: 0;\n  }\n`;\n\nexport const growAndShow = keyframes`\n  from {\n    max-height: 0;\n    opacity: 0;\n  }\n  to {\n    max-height: 100%;\n    opacity: 1;\n  }\n`;\n\n// Wrappers.\nexport const backgroundSlide = component => styled(component)`\n  background-repeat: no-repeat;\n  background-size: cover;\n  background-position: 50% 50%;\n  :hover {\n    animation: 10s ${bgSlide} ease-out infinite alternate;\n  }\n`;\n","import styled from \"styled-components\";\n\n// Styles.\nimport { fadeIn } from \"styles/animations\";\n\nconst boxShadowSmooth = (\n  layers: number,\n  color: string,\n  direction?: string\n): string =>\n  new Array(layers)\n    .fill(0)\n    .reduce(\n      (acc, val, index, arr) =>\n        acc +\n        `${Math.pow(2, index)}px ${direction === \"up\" ? \"-\" : \"\"}${Math.pow(\n          2,\n          index\n        )}px ${Math.pow(2, index)}px ${color}${\n          arr.length === index + 1 ? \";\" : \", \"\n        }`,\n      \"box-shadow: \"\n    );\n\nconst randomBackground = (bg): string =>\n  `linear-gradient(135deg, ${bg.bgColor1}, ${bg.bgColor2})`;\n\nexport const StyledCard = styled.div`\n  display: flex;\n  margin: auto;\n  height: 90%;\n  width: 90%;\n  border-radius: 15px;\n  overflow: hidden;\n  background: ${props => randomBackground(props.randomStyle || {})};\n  background-size: 110%;\n  background-position: 50% 50%;\n  color: ${props =>\n    props.randomStyle ? props.randomStyle.textColor : \"#ffffff\"};\n  opacity: 0;\n  animation: 0.5s ${fadeIn} ease-out forwards;\n  transition: transform 0.15s ease-in;\n  animation-delay: ${props => props.index * 0.12}s;\n  ${boxShadowSmooth(5, \"rgba(0, 0, 0, 0.22)\")};\n  :hover,\n  :focus-within {\n    transform: scale(1.05);\n  }\n`;\n","enum CardTypes {\n  NewCard = \"New Card\",\n  Image = \"Image\",\n  Website = \"Website\",\n  Text = \"Text\"\n}\nexport default CardTypes;\n","// Modules.\nimport styled from \"styled-components\";\n\n// Styles.\nimport { theMagicCurve, growAndShow } from \"styles/animations\";\n\nexport const StyledCardType = styled.p`\n  margin: 0;\n  text-transform: uppercase;\n  font-size: 0.85em;\n  color: #d36409;\n`;\n\nexport const StyledCardTitle = styled.h1`\n  margin: 0 0.5rem 0 0;\n  color: #09d3ac;\n  flex-shrink: 1;\n  font-size: 1.15em;\n  font-weight: 300;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  /* max-height: 0; */\n  opacity: 0;\n  animation: 0.5s ${growAndShow} ${theMagicCurve} forwards;\n`;\n\nconst randomColors = [\n  {\n    bgColor1: \"#004e92\",\n    bgColor2: \"#000428\",\n    textColor: \"#ffffff\"\n  },\n  {\n    bgColor1: \"#734b6d\",\n    bgColor2: \"#42275a\",\n    textColor: \"#ffffff\"\n  },\n  {\n    bgColor1: \"#41295a\",\n    bgColor2: \"#2f0743\",\n    textColor: \"#ffffff\"\n  },\n  {\n    bgColor1: \"#89253e\",\n    bgColor2: \"#3a6186\",\n    textColor: \"#ffffff\"\n  },\n  {\n    bgColor1: \"#243b55\",\n    bgColor2: \"#141e30\",\n    textColor: \"#ffffff\"\n  },\n  {\n    bgColor1: \"#3a7bd5\",\n    bgColor2: \"#3a6073\",\n    textColor: \"#ffffff\"\n  },\n  // {\n  //   bgColor1: \"#e0eafc\",\n  //   bgColor2: \"#cfdef3\",\n  //   textColor: \"#282c34\"\n  // },\n  // {\n  //   bgColor1: \"#eef2f3\",\n  //   bgColor2: \"#8e9eab\",\n  //   textColor: \"#282c34\"\n  // },\n  {\n    bgColor1: \"#6441a5\",\n    bgColor2: \"#2a0845\",\n    textColor: \"#ffffff\"\n  }\n];\nexport const randomStyle = () =>\n  randomColors[Math.floor(Math.random() * randomColors.length)];\n","import React from \"react\";\nimport styled from \"styled-components\";\n\n// Models.\nimport CardModel from \"models/CardModel\";\nimport CardTypes from \"models/CardTypes\";\n\n// Styles.\nimport { backgroundSlide } from \"styles/animations\";\nimport { StyledCardType, StyledCardTitle } from \"../cardStyles\";\n\ninterface IProps {\n  card: CardModel;\n}\n\nconst ImageCardContainer = backgroundSlide(styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  width: 100%;\n  height: 100%;\n  padding: 1em;\n  padding-bottom: 2em;\n`);\n\nexport const ImageCard: React.FC<IProps> = ({ card }) => {\n  return (\n    <ImageCardContainer\n      style={{\n        backgroundImage: `linear-gradient(transparent, black), url('${card.image}')`\n      }}\n    >\n      <StyledCardType>{CardTypes.Image}</StyledCardType>\n      <StyledCardTitle>{card.title}</StyledCardTitle>\n    </ImageCardContainer>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\n// Models.\nimport CardModel from \"models/CardModel\";\nimport CardTypes from \"models/CardTypes\";\n\n// Styles.\nimport { StyledCardType, StyledCardTitle } from \"../cardStyles\";\nimport { flexShrink, theMagicCurve } from \"styles/animations\";\n\ninterface IProps {\n  card: CardModel;\n}\n\nconst StyledCardContent = styled.p`\n  margin: 0;\n  margin-top: 1em;\n  font-size: 0.85rem;\n  overflow: auto;\n  white-space: pre-wrap;\n  flex-grow: 1;\n  animation: 0.5s ${flexShrink} 0.5s ${theMagicCurve} forwards;\n`;\n\nconst TextCardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  width: 100%;\n  height: 100%;\n  padding: 1em;\n`;\n\nexport const TextCard: React.FC<IProps> = ({ card }) => {\n  return (\n    <TextCardContainer>\n      <StyledCardType>{CardTypes.Text}</StyledCardType>\n      <StyledCardTitle>{card.title}</StyledCardTitle>\n      <StyledCardContent>{card.content}</StyledCardContent>\n    </TextCardContainer>\n  );\n};\n","// Modules.\nimport { useState, useLayoutEffect } from \"react\";\nimport ky from \"ky\";\n\n// Models.\nimport WebsiteDataModel from \"models/WebsiteDataModel\";\n\nexport const useWebsiteDetails = (\n  url?: string | undefined\n): [WebsiteDataModel | null, Function] => {\n  const [currentUrl, setCurrentUrl] = useState(url || \"\");\n  const [websiteData, setWebsiteData] = useState(null);\n\n  useLayoutEffect(() => {\n    const controller = new AbortController();\n    const { signal } = controller;\n\n    if (currentUrl) {\n      const localData = localStorage.getItem(currentUrl);\n      if (localData) {\n        setWebsiteData(JSON.parse(localData));\n      } else {\n        (async () => {\n          let response: Response | null = null;\n          try {\n            response = await ky.get(\n              `https://api.linkpreview.net/?key=${process.env.REACT_APP_URL_PREVIEW_API_KEY}&q=${currentUrl}`,\n              { signal }\n            );\n          } catch (e) {\n            console.log(e.response);\n          }\n          if (response) {\n            const json = await response.json();\n            setWebsiteData(json);\n            localStorage.setItem(currentUrl, JSON.stringify(json));\n          }\n        })();\n      }\n    } else {\n      setWebsiteData(null);\n    }\n\n    return () => controller.abort();\n  }, [currentUrl]);\n\n  return [websiteData, setCurrentUrl];\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\n// Models.\nimport CardModel from \"models/CardModel\";\n\n// Hooks.\nimport { useWebsiteDetails } from \"hooks/useWebsiteDetails\";\n\n// Styles.\nimport { backgroundSlide, flexShrink, theMagicCurve } from \"styles/animations\";\nimport { StyledCardType, StyledCardTitle } from \"../cardStyles\";\nimport CardTypes from \"models/CardTypes\";\n\ninterface IProps {\n  card: CardModel;\n}\n\n// Styled.\nconst WebsiteCardContainer = backgroundSlide(styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  width: 100%;\n  height: 100%;\n  padding: 1em;\n`);\n\nconst StyledCardUrl = styled.p`\n  margin: 0;\n  font-size: 0.85em;\n  color: #ffffff;\n  flex-grow: 1;\n  animation: 0.5s ${flexShrink} 0.5s ${theMagicCurve} forwards;\n`;\n\nexport const WebsiteCard: React.FC<IProps> = ({ card }) => {\n  const [website] = useWebsiteDetails(card.url);\n\n  return (\n    <WebsiteCardContainer\n      style={{\n        backgroundImage: `linear-gradient(transparent, black), url('${\n          website ? website.image : \"\"\n        }')`\n      }}\n    >\n      <StyledCardType>{CardTypes.Website}</StyledCardType>\n      <StyledCardTitle>{website ? website.title : card.title}</StyledCardTitle>\n      <StyledCardUrl>{card.url}</StyledCardUrl>\n    </WebsiteCardContainer>\n  );\n};\n","enum ImageTypes {\n  jpeg = \"image/jpeg\",\n  png = \"image/png\",\n  gif = \"image/gif\",\n  webp = \"image/webp\",\n  heic = \"image/heic\"\n}\nexport default ImageTypes;\n","// Modules.\nimport React, { useRef } from \"react\";\n\n// Elements.\nimport StyledCard from \"../StyledCard\";\nimport ImageCard from \"../ImageCard\";\nimport TextCard from \"../TextCard\";\nimport WebsiteCard from \"../WebsiteCard\";\n\n// Models.\nimport CardModel from \"models/CardModel\";\nimport CardTypes from \"models/CardTypes\";\n\n// Styles.\nimport { randomStyle } from \"../cardStyles\";\n\n// Props.\ninterface IProps {\n  card: CardModel;\n  index: number;\n  animState?: string;\n}\n\nexport const GridCard: React.FC<IProps> = ({ card, index }) => {\n  const style = useRef(randomStyle());\n  const elementForCard = (card: CardModel) => {\n    switch (card.type) {\n      case CardTypes.Image:\n        return <ImageCard card={card} />;\n      case CardTypes.Text:\n        return <TextCard card={card} />;\n      case CardTypes.Website:\n        return <WebsiteCard card={card} />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <StyledCard index={index} randomStyle={style.current}>\n      {elementForCard(card)}\n    </StyledCard>\n  );\n};\n","import { useState, useEffect } from \"react\";\n\n// Models.\nimport StoredImage from \"models/StoredImageModel\";\nimport ImageTypes from \"models/ImageTypes\";\n\n// Constants.\nconst acceptedImageTypes = [\n  ImageTypes.gif,\n  ImageTypes.jpeg,\n  ImageTypes.png,\n  ImageTypes.webp\n];\nconst notSupportedImageTypes = [ImageTypes.heic];\n\nexport const useStoredImage = (): [StoredImage | null, Function] => {\n  const [image, setImage] = useState<File | null>(null);\n  const [imageData, setImageData] = useState<StoredImage | null>(null);\n\n  useEffect(() => {\n    if (image) {\n      const { name, size, type } = image;\n\n      if (acceptedImageTypes.find(acceptedType => acceptedType === type)) {\n        let storedImage: StoredImage = {\n          base64: \"\",\n          name,\n          size,\n          type\n        };\n\n        const filereader = new FileReader();\n\n        filereader.readAsDataURL(image);\n        filereader.onload = () => {\n          if (typeof filereader.result === \"string\") {\n            storedImage.base64 = filereader.result;\n            setImageData(storedImage);\n          } else {\n            console.log(\"FileReader returned incorrect type (not a string).\");\n          }\n        };\n      } else if (\n        notSupportedImageTypes.find(\n          notSupportedType => notSupportedType === type\n        )\n      ) {\n        console.log(`Unsupported Image type.`);\n      } else {\n        console.log(`Unsupported type.`);\n      }\n    }\n  }, [image]);\n\n  return [imageData, setImage];\n};\n","// Models.\nimport CardTypes from \"models/CardTypes\";\n\nexport const initialCardState = {\n  type: CardTypes.NewCard,\n  image: \"\",\n  title: \"\",\n  body: \"\"\n};\n\nexport const addCardReducer = (state, newState) => {\n  let modifiedState = { ...state, ...newState };\n  switch (newState.type) {\n    case CardTypes.NewCard:\n      modifiedState.title = \"\";\n      modifiedState.body = \"\";\n      modifiedState.image = \"\";\n      break;\n    case CardTypes.Text:\n      modifiedState.image = \"\";\n      break;\n  }\n  return modifiedState;\n};\n","// Modules.\nimport React, { useRef, useLayoutEffect, useCallback, useReducer } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport styled from \"styled-components\";\n\n// Elements.\nimport StyledCard from \"../StyledCard\";\n\n// Models.\nimport CardTypes from \"models/CardTypes\";\n\n// Hooks.\nimport { useWebsiteDetails } from \"hooks/useWebsiteDetails\";\nimport { useStoredImage } from \"hooks/useStoredImage\";\n\n// Reducers.\nimport { addCardReducer, initialCardState } from \"reducers/addCardReducer\";\n\n// Utilities.\nimport debounce from \"utils/debounce\";\n\n// Styles.\nimport { StyledCardType, StyledCardTitle, randomStyle } from \"../cardStyles\";\n\n// Props.\ninterface IProps {\n  onAdd: Function;\n}\n\nconst StyledAddCard = styled(StyledCard)`\n  padding: 1em;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StyledTextArea = styled.textarea`\n  width: 100%;\n  flex-grow: 1;\n  margin-top: 0.25em;\n  padding: 0;\n  vertical-align: top;\n  font-size: 0.85rem;\n  resize: none;\n  background-color: transparent;\n  border: none;\n  color: ${props =>\n    props.cardType === CardTypes.Image || props.cardType === CardTypes.Website\n      ? \"#ffffff\"\n      : \"inherit\"};\n  ::placeholder {\n    color: inherit;\n    opacity: 0.6;\n  }\n  :focus {\n    outline: none;\n  }\n`;\n\nconst StyledIcon = styled.i`\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  opacity: 0;\n  font-size: 5em;\n  opacity: 0.2;\n  z-index: 0;\n  pointer-events: none;\n`;\n\nexport const GridAddCard: React.FC<IProps> = ({ onAdd }) => {\n  // Handlers.\n  const onDrop = files => setDroppedImage(files[0]);\n\n  const checkForUrl = useCallback(\n    debounce((text: string) => {\n      if (\n        text.match(\n          //eslint-disable-next-line\n          /^(?:http(s)?:\\/\\/)[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/gi\n        )\n      ) {\n        setWebsiteUrl(text);\n      } else {\n        setCurrentCard({ type: CardTypes.Text });\n      }\n    }, 100),\n    []\n  );\n\n  const textAreaChangeHandler = (e): void => {\n    const value = e.target.value.trim();\n    setCurrentCard({ body: e.target.value });\n    if (value) {\n      checkForUrl(value);\n    } else {\n      checkForUrl.cancel();\n      setCurrentCard({ type: CardTypes.NewCard });\n    }\n  };\n\n  const textAreaKeyDownHandler = (e): void => {\n    switch (e.key) {\n      case \"Enter\":\n        if (!e.getModifierState(\"Shift\") && !e.getModifierState(\"Control\")) {\n          e.preventDefault();\n          checkForUrl.cancel();\n          if (e.target.value.trim().length) {\n            addCardHandler();\n          }\n        }\n        break;\n      case \"Escape\":\n        if (!e.getModifierState(\"Shift\") && !e.getModifierState(\"Control\")) {\n          e.preventDefault();\n          setCurrentCard({ type: CardTypes.NewCard });\n        }\n        break;\n    }\n  };\n\n  const addCardHandler = (): void => {\n    onAdd({\n      title:\n        currentCard.title ||\n        currentCard.body\n          .split(/\\s/g)\n          .slice(0, 5)\n          .join(\" \"),\n      url: website ? website.url : \"\",\n      type: currentCard.type,\n      image: currentCard.image,\n      content: currentCard.body\n    });\n    setCurrentCard({ type: CardTypes.NewCard });\n  };\n\n  // Refs.\n  const styleRef = useRef(randomStyle());\n\n  // State.\n  const [currentCard, setCurrentCard] = useReducer(\n    addCardReducer,\n    initialCardState\n  );\n  const [website, setWebsiteUrl] = useWebsiteDetails();\n  const [droppedImage, setDroppedImage] = useStoredImage();\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    noClick: true,\n    noKeyboard: true\n  });\n\n  // Effects.\n  useLayoutEffect(() => {\n    switch (currentCard.type) {\n      case CardTypes.NewCard:\n        setWebsiteUrl(\"\");\n        break;\n      case CardTypes.Website:\n        addCardHandler();\n        break;\n      case CardTypes.Image:\n        addCardHandler();\n        break;\n      case CardTypes.Text:\n        setWebsiteUrl(\"\");\n        break;\n      default:\n        break;\n    }\n    // eslint-disable-next-line\n  }, [currentCard.type]);\n\n  useLayoutEffect(() => {\n    if (website) {\n      setCurrentCard({\n        type: CardTypes.Website,\n        image: website.image,\n        title: website.title\n      });\n    } else {\n      setCurrentCard(initialCardState);\n    }\n  }, [website]);\n\n  useLayoutEffect(() => {\n    if (droppedImage) {\n      setCurrentCard({\n        type: CardTypes.Image,\n        image: droppedImage.base64,\n        title: droppedImage.name\n      });\n    } else {\n      setCurrentCard(initialCardState);\n    }\n  }, [droppedImage]);\n\n  return (\n    <StyledAddCard\n      randomStyle={styleRef.current}\n      style={{\n        backgroundImage: currentCard.image\n          ? `linear-gradient(0deg, transparent, black), url('${currentCard.image}')`\n          : \"\"\n      }}\n      {...getRootProps()}\n      onKeyDown={textAreaKeyDownHandler}\n    >\n      <input {...getInputProps()} />\n      <StyledCardType>{currentCard.type}</StyledCardType>\n      {currentCard.title && (\n        <StyledCardTitle>{currentCard.title}</StyledCardTitle>\n      )}\n      {currentCard.type !== CardTypes.Image && (\n        <StyledTextArea\n          cardType={currentCard.type}\n          placeholder=\"Type your idea, website address or drop an image here...\"\n          onChange={textAreaChangeHandler}\n          value={currentCard.body}\n        />\n      )}\n      {currentCard.type === CardTypes.NewCard && (\n        <StyledIcon className=\"material-icons\">\n          {isDragActive ? \"add_photo_alternate\" : \"add\"}\n        </StyledIcon>\n      )}\n    </StyledAddCard>\n  );\n};\n","export default function debounce(func, wait, immediate) {\n  var timeout;\n  var debouncedFunc = function() {\n    var context = this,\n      args = arguments;\n    var later = function() {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n    var callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n\n  debouncedFunc.cancel = function() {\n    if (timeout) clearTimeout(timeout);\n  };\n\n  return debouncedFunc;\n}\n","import CardTypes from \"models/CardTypes\";\n\nexport default [\n  {\n    type: CardTypes.Image,\n    image:\n      \"https://store.storeimages.cdn-apple.com/4982/as-images.apple.com/is/iphone-11-pro-max-select-2019?wid=882&hei=1058&fmt=jpeg&qlt=80&op_usm=0.5,0.5&.v=1567027664295\",\n    title: \"iPhone 11 Pro Max\"\n  },\n  {\n    type: CardTypes.Website,\n    url: \"https://www.awwwards.com/\",\n    title: \"AWWWards Website\"\n  },\n  {\n    type: CardTypes.Text,\n    title: \"My Thoughts\",\n    url: \"\",\n    content:\n      \"Spicy jalapeno bacon ipsum dolor amet pork loin frankfurter drumstick, chuck strip steak bresaola tenderloin alcatra short ribs chicken corned beef beef t-bone. Tail sirloin sausage shoulder, beef ribs prosciutto cow short ribs tenderloin ball tip turducken porchetta t-bone salami.\"\n  }\n];\n","import React, {\n  useState,\n  useLayoutEffect,\n  createContext,\n  useContext\n} from \"react\";\n\n// Models.\nimport FakeData from \"models/FakeData.js\";\nimport CardModel from \"models/CardModel\";\n\n// Defaults.\nconst DefaultStoredCards: [CardModel[], Function] = [[], f => f];\n\n// Context.\nconst StoredCardsContext = createContext<[CardModel[], Function]>(\n  DefaultStoredCards\n);\n\nconst StoredCardsManager = (userId: string): [CardModel[], Function] => {\n  const [cards, setCards] = useState<CardModel[]>([]);\n\n  const addCard = (newCard: CardModel): void => {\n    setCards(oldCards => [...oldCards, newCard]);\n  };\n\n  useLayoutEffect(() => {\n    setCards(FakeData);\n  }, [userId]);\n\n  return [cards, addCard];\n};\n\nexport const StoredCardsProvider = ({ children, userId }) => (\n  <StoredCardsContext.Provider value={StoredCardsManager(userId)}>\n    {children}\n  </StoredCardsContext.Provider>\n);\n\nexport const useStoredCards = () => useContext(StoredCardsContext);\n","// Modules.\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\n// Elements.\nimport GridCard from \"./elements/GridCard\";\nimport GridAddCard from \"./elements/GridAddCard\";\n\n// Models.\nimport CardModel from \"models/CardModel\";\n\n// Hooks.\nimport { useStoredCards } from \"hooks/useStoredCards\";\n\n// Styled.\nconst StyledList = styled.div`\n  list-style-type: none;\n  padding: 0;\n  display: grid;\n  grid-template-columns: repeat(3, minmax(0, 1fr));\n  grid-auto-rows: 275px;\n  justify-content: center;\n  align-items: center;\n`;\n\n// Props.\ninterface IProps {}\n\nexport const Grid: React.FC<IProps> = () => {\n  const [storedCards, addCard] = useStoredCards();\n  const [useAnimDelay, setUseAnimDelay] = useState(true);\n\n  const addCardHandler = (card: CardModel): void => {\n    setUseAnimDelay(false);\n    addCard(card);\n  };\n\n  return (\n    <section>\n      <StyledList>\n        <TransitionGroup component={null} className=\"grid-list\">\n          {storedCards.map((card: CardModel, index) => (\n            <CSSTransition key={`${card.title}${index}`} timeout={0}>\n              <GridCard index={useAnimDelay ? index : 0} card={card} />\n            </CSSTransition>\n          ))}\n        </TransitionGroup>\n        <GridAddCard key={\"grid-add-card\"} onAdd={addCardHandler} />\n      </StyledList>\n    </section>\n  );\n};\n","// Modules.\nimport React from \"react\";\nimport styled from \"styled-components\";\n\n// Components.\nimport Grid from \"components/Grid\";\n\n// Context.\nimport { StoredCardsProvider } from \"hooks/useStoredCards\";\n\n// Static.\nimport logo from \"./logo.svg\";\n\n// Style.\nimport \"./App.scss\";\n\n// Styled.\nconst PageContainer = styled.div`\n  padding: 0 5vw;\n`;\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div className=\"App-title\">\n          <h1>Better Notion</h1>\n          <h2>Prototype</h2>\n        </div>\n      </div>\n      <StoredCardsProvider userId={\"1234\"}>\n        <PageContainer>\n          <Grid />\n        </PageContainer>\n      </StoredCardsProvider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}